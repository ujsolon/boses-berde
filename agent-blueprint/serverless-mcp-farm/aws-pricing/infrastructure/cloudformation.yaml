AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Pricing MCP Server with API Gateway and Lambda using streamable HTTP'

Parameters:
  DeploymentStage:
    Type: String
    Default: 'prod'
    Description: 'API Gateway deployment stage'

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: AWSPricingAPIAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - pricing:GetProducts
                  - pricing:DescribeServices
                  - pricing:GetAttributeValues
                  - pricing:ListPriceLists
                  - pricing:GetPriceListFileUrl
                Resource: '*'

  MCPLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-mcp-server'
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder - will be updated'}
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          PYTHONPATH: /var/task
          FASTMCP_LOG_LEVEL: ERROR

  MCPApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-mcp-api'
      Description: 'AWS Pricing MCP Server API Gateway with streamable HTTP'
      EndpointConfiguration:
        Types:
          - REGIONAL

  MCPApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MCPApiGateway
      ParentId: !GetAtt MCPApiGateway.RootResourceId
      PathPart: 'mcp'

  MCPApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MCPApiGateway
      ResourceId: !Ref MCPApiResource
      HttpMethod: ANY
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MCPLambdaFunction.Arn}/invocations'

  MCPApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MCPApiGateway
      ParentId: !GetAtt MCPApiGateway.RootResourceId
      PathPart: '{proxy+}'

  MCPApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MCPApiGateway
      ResourceId: !Ref MCPApiProxyResource
      HttpMethod: ANY
      AuthorizationType: AWS_IAM
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MCPLambdaFunction.Arn}/invocations'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'

  MCPApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MCPApiGateway
      ResourceId: !GetAtt MCPApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MCPLambdaFunction.Arn}/invocations'

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MCPLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MCPApiGateway}/*/*'

  # Parameter Store entry for MCP endpoint
  McpEndpointParameter:
    Type: AWS::SSM::Parameter
    DependsOn: MCPApiDeployment
    Properties:
      Name: '/mcp/endpoints/serverless/aws-pricing'
      Type: String
      Value: !Sub 'https://${MCPApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/mcp'
      Description: 'AWS Pricing MCP Server endpoint URL'

  MCPApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MCPApiMethod
      - MCPApiProxyMethod
      - MCPApiRootMethod
    Properties:
      RestApiId: !Ref MCPApiGateway
      StageName: !Ref DeploymentStage

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${MCPApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'
  
  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref MCPLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-lambda-name'

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Financial Market MCP Server with API Gateway and Lambda using streamable HTTP'

Parameters:
  DeploymentStage:
    Type: String
    Default: 'prod'
    Description: 'API Gateway deployment stage'
  LogLevel:
    Type: String
    Default: 'INFO'
    Description: 'Logging level for the Lambda function'
  LayerArn:
    Type: String
    Description: 'ARN of the Lambda layer containing pandas and yfinance dependencies'

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  MCPLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-mcp-server'
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Layers:
        - !Ref LayerArn
      Code:
        ZipFile: |
          # This will be replaced during deployment
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Hello from Lambda!"}
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          FASTMCP_LOG_LEVEL: !Ref LogLevel
      Timeout: 60
      MemorySize: 1024

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: 'Financial Market MCP Server API'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'mcp'

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MCPLambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Headers: false

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref DeploymentStage

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MCPLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*'

  MCPEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/mcp/endpoints/serverless/financial-market'
      Type: String
      Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/mcp'
      Description: 'Financial Market MCP Server endpoint URL'

Outputs:
  ApiUrl:
    Description: 'API Gateway endpoint URL for Financial Market MCP Server'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentStage}/mcp'
    Export:
      Name: !Sub '${AWS::StackName}-api-url'

  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref MCPLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-lambda-name'

  LambdaFunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt MCPLambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-lambda-arn'

  ParameterStorePath:
    Description: 'Parameter Store path for MCP endpoint'
    Value: '/mcp/endpoints/serverless/financial-market'
    Export:
      Name: !Sub '${AWS::StackName}-parameter-path'